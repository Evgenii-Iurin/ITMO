"""
Астроград
ограничение по времени на тест 2 с
ограничение по памяти на тест 256 мегабайт
В Астрополисе прошел концерт популярной группы Астроград. За пару дней до концерта перед кассой выстроилась огромная очередь из людей, желающих туда попасть. Изначально очередь была пуста. В каждый из n моментов времени происходило следующее:

В очередь пришел новый человек с уникальным номером id, он встает в очередь последним.
Человеку, стоящему спереди очереди, удалось купить билет. Он уходит.
Человеку, стоящему последнему в очереди, надоело ждать. Он уходит.
Человек с уникальным номером q хочет знать, сколько людей стоит в очереди спереди него.
Очередь хочет знать, человек с каким уникальным номером стоит сейчас первым и задерживает всех.
Вам необходимо написать программу, которая умеет обрабатывать описанные события.

Входные данные
В первой строке дано целое число n (1 ≤ n ≤ 10^5) — количество событий. В каждой из следующих n строк дано описание событий: номер события, а также число id (1 ≤ id ≤ 10^5) для событий типа 1 и число q для событий типа 4. События происходили в том порядке, в каком они описаны во входном файле. Гарантируется корректность всех событий.

Выходные данные
Выведите ответы для событий типа 4 и 5 в том порядке, в каком они описаны во входном файле.

Input:
7
1 1
5
1 3
3
2
1 2
4 2


Output:
1
0
"""


def main():
    n_actions = int(input())
    smap = [None] * (10**5 + 1)
    stack = []  
    head = 0  

    for _ in range(n_actions):
        action = list(map(int, input().split()))

        if action[0] == 1:
            id = action[1]
            stack.append(id)
            if len(stack) == 1:
                smap[id] = 0
            else:
                smap[id] = smap[stack[-2]] + 1

        elif action[0] == 2:
            head += 1

        elif action[0] == 3:
            stack.pop()

        elif action[0] == 4:
            id = action[1]
            people_in_front = smap[id] - smap[stack[head]]
            print(people_in_front)

        elif action[0] == 5:
            print(stack[head])


if __name__ == "__main__":
    main()